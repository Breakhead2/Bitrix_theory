=================КУРС БИТРИКС=================

=================УРОК №6 ШАБЛОНЫ САЙТА. ИНТЕГРАЦИЯ ВЕРСТКИ=================

В папке bitrix надится ядро CMS, поэтому лучше не вносить какие-либо изменения в данную папку.

Все новые правки, компоненты лучше создавать в папке local, которая создается на том же уровне что и папка bitrix.

Перенескем папку main нашего основного шаблона из bitrix/templates/main в local/templtes.
Папка main уже существует так как при первичной установке мы указали, что нужно создать шаблон и назвали его main некоего layout-а.
В данной папке уже есть php файлы header.php, footer.php, description.php, а также файлы стилей.

Теперь скопируем папку верстки в папку нашего шаблона. Для этого создадим папку assets и помести туда верстку.
Далее переносим верстку хедера в файл header.php, а футер сайта в соотвественно footer.php

В ФАЙЛЕ HEADER.PHP ВИДИМ КОД:

<?
if(!defined('B_PROLOG_INCLUDED') || B_PROLOG_INCLUDED !== true)
	die();
?>
 
Данный код нужен, чтобы если пользователь откроет данный файл через браузер напрямую, он не отработал. 
 
Далее видим несколько методов:

1. Метод <?$APPLICATION->ShowHead();?> - который отвечает за вывод тегов, шрифтов, стилей, скриптов. которые должны быть в блоке <head>. Перенесем его в наш блок <head>.

2. Метод <?$APPLICATION->ShowTitle();?> - который отвечат за вывод заголовка для каждой страницы. Перенесем его в наш тег <title>

3. Метод <?$APPLICATION->ShowPanel();?> - благодаря которому на нашем сайте будет показа панель битрикс для работы с сайтом. 
   Данный метод необходимо скопировать в начала тега <body> и в блоке panel.

	<div id="panel">
		<?$APPLICATION->ShowPanel();?>
	</div>

С шапкой сайта пока все, далее мы к ней еще вернемся. Сейчас займемся подвалом сайта. Перейдем к файлу footer.php и скопируем туда подвал.



НАСТРОЙКА СТИЛЕЙ

Изначально стили не будут подключены, так как неверно будет указан к ним путь.
Воспользуетмся константой из битрикс -  SITE_TEMPLATE_PATH

Константа SITE_TEMPLATE_PATH - константа, которая содержит путь к папке шаблона. В нашем случае до папки main.


Использование библиотеки Asset для подключения стилей, скриптов

ПОДКЛЮЧИМ КЛАСС ASSET

use Bitrix/Main/Page/Asset

Далее используя статичный метод класса Asset создадим экземпляр класса через метод getInstance() и вызовем метод addCss(PATH), который принимает параметр путь к файлу;

Asset::getInstance()->addCss(PATH) - подключение стилей
Asset::getInstance()->addJs(PATH) - подключение js-скриптов
Asset::getInstance()->addString(PATH) - подключение шрифтов, где PATH это тег link по типу: '<link href="https://fonts.googleapis.com/css?family=Lato:300,400,700" rel="stylesheet">'


================= УРОК №7  РАБОТА СО СТРАНИЦАМИ =================

Страницы можно создавать/редактировать через панель администратора.
Задав раздел, имя страницы, наименование пункта в меню и так далее.
Также можно указать данные к метатегам description, keywords, title, robot.
После создания страницы, открывается визуальный редактор, в который можно писать наш контент.

Создание раздела, раздел это некая папка в котором логически сложены несколько страниц по какой то теме.
После создания раздела, по умолчаю bitrix создает файл index.php, а также в папке раздела создается файл .section.php с параметрами страниц (title, keywords, description) по умолчаю.
Если у страницы раздеда или подраздела и его страниц не заданы какие то параметры, то они будут унаследованы из параметров раздела.

Создание страниц/разделов через файловую систему. Страницы - это файлы php. Разделы - папки. 
Создадим страницу "О нас", для этого создадим папку about и в ней создадим файл index.php и в него подгрузим необходимые нам элементы шаблона.

<?
require($_SERVER['DOCUMENT_ROOT'].'/bitrix/header.php'); - ОБЯЗАТЕЛЬНО! данный файл подключает файл header из папки main(имя шаблона), ДАННЫЙ ФАЙЛ НЕ ЯВЛЯЕТСЯ САМОЙ ШАПКОЙ.
$APPLICATION->SetTitle('Главная'); - здесь это заголовок <h1>, а не title страницы.
?>

<p>О нас</p> - контент

<?
require($_SERVER['DOCUMENT_ROOT'].'/bitrix/footer.php');  - ОБЯЗАТЕЛЬНО! данный файл подключает файл footer из папки main(имя шаблона), ДАННЫЙ ФАЙЛ НЕ ЯВЛЯЕТСЯ САМИМ ПОДВАЛОМ
?>

ПЕРЕЙДЕМ ЗАДАНИЮ СВОЙСТВ СТРАНИЦЫ С ПОМОЩЬЮ КОДА:

Параметры страницы передаются с помощью метода SetPageProperty, который есть в объекте APPLICATION - экземпляр абстрактного класса Application.
Application - абстрактный класс для любых приложений. Любой конкретный класс приложения является наследником этого абстрактного класса.
Приложение является базовой точкой входа (маршрутизатором) для обращения к глобальным сущностям ядра:
соединение с источниками данных, управляемый кеш и т.п.
Также приложение содержит глобальные данные, которые относятся к самому сайту и не зависят от конкретного хита. 
То есть, приложение является неизменяемой частью, не зависящей от конкретного хита.

$APPLICATION->SetPageProperty('NAME_PROPERTY', VALUE) - где NAME_PROPERTY - имя свойства (TITLE, DESCRIPTION, KEYWORDS), а VALUE - значение данного свойства.

Установим title для нашей страницы.

$APPLICATION->SetPageProperty('TITLE', 'О нас | We Coders');

Данным методом также можно установить другие параметры страницы: KEYWORDS И DESCRIPTION.

$APPLICATION->SetPageProperty('KEYWORDS', 'О нас, о компании, компания');
$APPLICATION->SetPageProperty('DESCRIPTION', 'Инфорамция о компании и ее результатах');

Вспомним что в шаблоне нашего сайта, а именно в файле header.php в теге <title> присутствует методов ShowTitle() - с помощью которого отображается определенный title для каждой страницы.

<title><?$APPLICATION->ShowTitle();?></title>

Сделаем так, чтобы в наш шаблон передавалась переменная ЗАГОЛОВОК, которую мы задаем на каждой странице с помощью метода setTitle('TEXT').

Для этого в шаблоне, а именно в файле header.php найдем разметку заголовка и напишем знакомый нам уже метод ShowTitle,
с единственной разницой что мы передадим данной методу параметр false, чтобы передать туда не title, а заголовок (headering)

<h2 class="white-text"><?= $APPLICATION->ShowTitle(false) ?></h2>


ПОЛУЧЕНИЕ СВОЙСТВ СТРАНИЦЫ

С помощью метода GetPageProperty('NAME_PROPERTY') можно выводить нужные нам свойства страницы.

<p>Описание данной страницы: <?= $APPLICATION->GetPageProperty('DESCRIPTION'); ?> </p>

ПРИМЕЧАНИЕ.Наименование параметров можно задавать прописными буквами, методы не регистрозависимые.

МЕТОД SHOW HEAD

Метод предназначен для вывода в шаблоне сайта основных полей тега <head>: мета-теги Content-Type, robots, keywords, description; стили CSS; скрипты, заданные через CMain::AddHeadScript. Нестатический метод.

<head>
<?$APPLICATION->ShowHead();?>
<title><?$APPLICATION->ShowTitle()?></title>
</head>

Данный метод принемает параметр устанавливающий, по какому стандарту оформляются HTML-теги.
Если значение true, то теги выводятся по стандарту XHTML (<meta />), иначе по стандарту HTML 4 (<meta>). Параметр
появился в версии 8.5.3 ядра. Необязательный, по умолчанию true.


================= УРОК №8  ИНТЕГРАЦИЯ И УПРАВЛЕНИЕ МЕНЮ (КОМПОНЕНТ MENU) =================